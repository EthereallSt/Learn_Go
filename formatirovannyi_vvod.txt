Также можно применять универсальный спецификатор %v, который для типа boolean аналогичен %t, для целочисленных типов - %d,
 для чисел с плавающей точкой - %g, для строк - %s.

 Каждый спецификатор представляет определенный тип данных:

%t: для вывода значений типа boolean (true или false)

%b: для вывода целых чисел в двоичной системе

%c: для вывода символов, представленных числовым кодом

%d: для вывода целых чисел в десятичной системе

К спецификаторам можно добавлять различные флаги, которые влияют на форматирование значений. 
Например, число перед спецификатором указывает, какую минимальную длину в символах будет занимать 
выводимое значение. Например, %9f - число с плавающей точкой будет занимать как минимум 9 позиций. 
Если ширина больше, чем требуется значению, то заполняется пробелами.

Для чисел с плавающей точкой можно указать точность или количество символов в дробной части. 
Для этого количество символов указывается после точки: %.2f - две цифры в дробной части после точки.
 Например, варианты форматирования чисел с плавающей точкой:

 %f: точность и ширина значения по умолчанию

%9f: ширина - 9 символов и точность по умолчанию
(число с плавающей точкой будет занимать как минимум 9 позиций. 
Если ширина больше, чем требуется значению, то заполняется пробелами.)

%.2f: ширина по умолчанию и точность - 2 символа

%9.2f: ширина - 9 и точность - 2

%9.f: ширина - 9 и точность - 0

Также из флагов следует отметить дефис -, который дополняет значение пробелами не слева,
 как по умолчанию, а справа.

 var a float64 = 100.123456
fmt.Printf("это число %f типа %T", a, a)
// вывод: это число 100.123456 типа float64

var a1 byte = 's'
var a2 int = 1234
fmt.Printf("%q %b", a1, a2)
// вывод: 's' 10011010010


// использование \n позволяет сделать перенос строки
var a1 string = "123"
var a2 string = "1234"
fmt.Printf("%q \n%s", a1, a2)
// вывод: 
// "123" 
// 1234